#!/bin/bash

day_suffix() {
    case `date +%d` in
        1|21|31) echo "st";;
        2|22)    echo "nd";;
        3|23)    echo "rd";;
        *)       echo "th";;
    esac
}

SMALL_WIDTH=80
MEDIUM_WIDTH=150

STATUS_BG=${STATUS_BG:-base2}
STATUS_FG=${STATUS_FG:-base1}

HOSTNAME_BG=${HOSTNAME_BG:-$STATUS_BG}
HOSTNAME_FG=${HOSTNAME_FG:-orange}
HOSTNAME_MSG=" #h"
TIME_BG=${TIME_BG:-$STATUS_BG}
TIME_FG=${TIME_FG:-magenta}
TIME_MSG="⏲ `date +%H:%M`"
DATE_BG=${DATE_BG:-$STATUS_BG}
DATE_FG=${DATE_FG:-yellow}
DATE_MSG="☀ `date +\"%b %e\"``day_suffix`"
SESSION_BG=${SESSION_FG:-base1}
SESSION_FG=${SESSION_FG:-base3}
SESSION_MSG="#S"

WINDOW_BG=${WINDOW_BG:-$STATUS_BG}
WINDOW_FG=${WINDOW_FG:-$STATUS_FG}
CURR_WINDOW_BG=${CURR_WINDOW_BG:-blue}
CURR_WINDOW_FG=${CURR_WINDOW_FG:-base2}

BATTERY_FULL_BG=${BATTERY_FULL_BG:-$STATUS_BG}
BATTERY_FULL_FG=${BATTERY_FULL_FG:-green}
BATTERY_CHARGING_BG=${BATTERY_CHARGING_BG:-$STATUS_BG}
BATTERY_CHARGING_FG=${BATTERY_CHARGING_FG:-orange}
BATTERY_MED_BG=${BATTERY_MED_BG:-$STATUS_BG}
BATTERY_MED_FG=${BATTERY_MED_FG:-yellow}
BATTERY_LOW_BG=${BATTERY_LOW_BG:-red}
BATTERY_LOW_FG=${BATTERY_LOW_FG:-$STATUS_BG}

GIT_DIRTY_BG=${GIT_DIRTY_BG:-$STATUS_BG}
GIT_DIRTY_FG=${GIT_DIRTY_FG:-yellow}
GIT_CLEAN_BG=${GIT_CLEAN_BG:-$STATUS_BG}
GIT_CLEAN_FG=${GIT_CLEAN_FG:-green}

WEATHER_BG=${WEATHER_BG:-$STATUS_BG}
WEATHER_FG=${WEATHER_FG:-base0}
WEATHER_MSG="sunny"

solar_to_tmux() {
    case "$1" in
        "base02") echo "colour0";;
        "red") echo "colour1";;
        "green") echo "colour2";;
        "yellow") echo "colour3";;
        "blue") echo "colour4";;
        "magenta") echo "colour5";;
        "cyan") echo "colour6";;
        "base2") echo "colour7";;
        "base03") echo "colour8";;
        "orange") echo "colour9";;
        "base01") echo "colour10";;
        "base00") echo "colour11";;
        "base0") echo "colour12";;
        "violet") echo "colour13";;
        "base1") echo "colour14";;
        "base3") echo "colour15";;
        *) return 1;
    esac
    return 0;
}

set_color() {
    FG="$1_FG"
    BG="$1_BG"
    if [ "$2" = "invert" ]; then
        echo $(tmux_color ${!BG} ${!FG} $3)
    else
        echo $(tmux_color ${!FG} ${!BG} $2)
    fi
}

tmux_color() {
    if [ -z $3 ]; then
        echo "#[fg=$(solar_to_tmux $1),bg=$(solar_to_tmux $2)]"
    else
        echo "#[fg=$(solar_to_tmux $1),bg=$(solar_to_tmux $2),$3]"
    fi
}

build_block() {
    #$1=side, $2=prevbg, $3=nextbg, $4=blockbg, $5=blockfg, $6=text, TODO $7 attr
    if [ "$1" = "right" ]; then
        if [ "$2" = "$4" ]; then
            echo $(tmux_color $5 $4 "nobold,nounderscore,noitalics")"" $(tmux_color $5 $4 $7)"$6 "
        else
            echo $(tmux_color $4 $2 "nobold,nounderscore,noitalics")""$(tmux_color $5 $4 $7)"$6 "
        fi
    elif [ "$1" = "left" ]; then
        if [ "$3" = "$4" ]; then
            echo $(tmux_color $5 $4 $7)" $6 "$(tmux_color $5 $4 "nobold,nounderscore,noitalics")""
        else
            echo $(tmux_color $5 $4 $7)" $6 "$(tmux_color $4 $3 "nobold,nounderscore,noitalics")""
        fi
    fi
}

setup_battery() {
    if which battery >/dev/null && battery >/dev/null; then
        BAT_LEV_C=$(battery Charging)
        BAT_LEV_D=$(battery Discharging)
        BAT_SYM="🔋"
        if [ -n "$BAT_LEV_C" ];
            then BAT_LEV=$BAT_LEV_C; BAT_SYM="⚡";
            else BAT_LEV=$BAT_LEV_D;
        fi
        if [ $BAT_LEV -gt 95 ]; then
            BAT_SYM=" "
            BATTERY_FG=$BATTERY_FULL_FG
            BATTERY_BG=$BATTERY_FULL_BG
        elif [ -n "$BATTERY_LEV_C" ]; then
            BATTERY_FG=$BATTERY_CHARGING_FG
            BATTERY_BG=$BATTERY_CHARGING_BG
        elif [ $BAT_LEV -gt 20 ]; then
            BATTERY_FG=$BATTERY_MED_FG
            BATTERY_BG=$BATTERY_MED_BG
        else
            BAT_SYM="⚠"
            BATTERY_FG=$BATTERY_LOW_FG
            BATTERY_BG=$BATTERY_LOW_BG
        fi
        BATTERY_MSG="${BAT_SYM} ${BAT_LEV}%"
        return 0
    else
        return 1
    fi
}

setup_git() {
    if find_git_repo; then
        set_git_branch $GIT_REPO
        GIT_LONG_MSG=" "$(basename ${GIT_REPO})" : "${GIT_BRANCH}
        GIT_MEDIUM_MSG=" "${GIT_BRANCH}
        GIT_SHORT_MSG=""
        if is_git_clean $GIT_REPO; then
            GIT_BG=$GIT_CLEAN_BG
            GIT_FG=$GIT_CLEAN_FG
        else
            GIT_BG=$GIT_DIRTY_BG
            GIT_FG=$GIT_DIRTY_FG
        fi
        GIT_LONG_BG=$GIT_BG
        GIT_LONG_FG=$GIT_FG
        GIT_MEDIUM_BG=$GIT_BG
        GIT_MEDIUM_FG=$GIT_FG
        GIT_SHORT_BG=$GIT_BG
        GIT_SHORT_FG=$GIT_FG
        return 0
    else
        return 1
    fi
}

# Taken from http://aaroncrane.co.uk/2009/03/git_branch_prompt/
find_git_repo() {
    local dir=$(tmux showenv -g TMUX_PWD_$(tmux display -p "#D" | tr -d %)  | sed 's/^.*=//')
    if [ -d "$dir" ]; then
        until [ "$dir" -ef / ]; do
            if [ -f "$dir/.git/HEAD" ]; then
                GIT_REPO=`readlink -e $dir`
                return 0
            fi
            dir="${dir}/.."
        done
    fi
    GIT_REPO=''
    return 1
}

set_git_branch() {
    head=$(< "$1/.git/HEAD")
    if [[ $head == ref:\ refs/heads/* ]]; then
        GIT_BRANCH=${head#*/*/}
    elif [[ $head != '' ]]; then
        GIT_BRANCH='(detached)'
    else
        GIT_BRANCH='(unknown)'
    fi
}

# Taken from https://github.com/jimeh/git-aware-prompt
is_git_clean() {
    if [ -d "$1" ]; then
        local status=$(cd $1 && git status --porcelain 2> /dev/null)
        if [[ "$status" != "" ]]; then
            return 1
        else
            return 0
        fi
    fi
    return 1
}

add_blocks() {
    # handle special setups
    for block in $@; do
        if [ "$block" = "BATTERY" ]; then setup_battery || continue; fi
        if [ "${block:0:3}" = "GIT" ]; then setup_git || continue; fi
        BLOCKS="$BLOCKS $block"
    done
    add_blocks_sub $BLOCKS
}
add_blocks_sub() {
    SIDE=$1
    PREV_BG=${PREV_BG:-$STATUS_BG}
    while shift && [ -n "$1" ]; do
        # set up colors
        FG="$1_FG"
        BG="$1_BG"
        MSG="$1_MSG"
        # find the next bg
        if [ -n "$2" ]; then NEXT_BG_NAME="$2_BG"; else NEXT_BG_NAME="STATUS_BG"; fi
        NEXT_BG=${!NEXT_BG_NAME}
        # add to the status
        STATUS=${STATUS}$(build_block $SIDE $PREV_BG $NEXT_BG ${!BG} ${!FG} "${!MSG}")
        # set the prev bg
        PREV_BG=${!BG}
    done
}


if [ "$1" = "right" ]; then
    if [ "$2" -gt "$MEDIUM_WIDTH" ]; then
        add_blocks right BATTERY GIT_LONG HOSTNAME
    elif [ "$2" -gt "$SMALL_WIDTH" ]; then
        add_blocks right BATTERY GIT_MEDIUM
    else
        add_blocks right BATTERY GIT_SHORT
    fi
    echo ${STATUS}" "
elif [ "$1" = "left" ]; then
    if [ "$2" -gt "$MEDIUM_WIDTH" ]; then
        add_blocks left DATE TIME
    else
        add_blocks left TIME
    fi
    echo ${STATUS}
elif [ "$1" = "window" ]; then
    echo $(set_color WINDOW "nobold,nounderscore,noitalics")" #I  #W "
elif [ "$1" = "window-current" ]; then
    echo $(set_color CURR_WINDOW "nobold,nounderscore,noitalics")""$(set_color CURR_WINDOW)" #I  #W "$(set_color CURR_WINDOW invert)""
fi
